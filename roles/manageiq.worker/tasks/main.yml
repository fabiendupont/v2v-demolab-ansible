---
- name: Install required packages
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - cmake
    - bzip2
    - docker
    - gcc-c++
    - git
    - libcurl-devel
    - libffi-devel
    - libxml2-devel
    - libxslt-devel
    - memcached
    - nodejs
    - npm
    - openssl-devel
    - patch
    - readline-devel
    - sqlite-devel
    - "{{ manageiq_ruby_scl }}-ruby"
    - "{{ manageiq_ruby_scl }}-ruby-devel"
    - "{{ manageiq_ruby_scl }}-rubygems"
    - "{{ manageiq_ruby_scl }}-rubygem-bundler"

- name: Generate /etc/profile.d config file for Ruby
  template:
    src: etc/profile.d/scl.sh.j2
    dest: "/etc/profile.d/{{ manageiq_ruby_scl }}.sh"
    owner: root
    group: root
    mode: 0755
  vars:
    - scl: "{{ manageiq_ruby_scl }}"

- name: Install node.js packages
  npm:
    name: "{{ item }}"
    state: latest
    global: yes
  with_items:
    - bower
    - gulp-cli
    - webpack
    - yarn

- name: Create docker group
  group:
    name: docker
    state: present
    system: yes

- name: Start and enable docker.service
  service:
    name: docker
    state: started
    enabled: yes

- name: Start and enable memcached.service
  service:
    name: memcached
    state: started
    enabled: yes

- name: Create miq user account
  user:
    name: miq
    comment: ManageIQ Service Account
    password: "$6$d863aJB.$3xS2Jj60nj2uyYxjb2b6t1Bc2PYEYtIZq6v7d5T0bymXxSEdYB.UieAOqTt8H2BgC14FH4BR3CIRyscfoDPXC/"
    shell: /bin/bash
    state: present
    system: yes
    groups: docker

# Clone git repositories as miq user
- block:
  - name: Clone ManageIQ repository
    git:
      repo: "https://github.com/{{ item.username }}/{{ item.name }}.git"
      dest: "/home/miq/{{ item.name }}"
      version: "{{ item.branch }}"
      force: true
    with_items: "{{ manageiq_git_repos }}"

  - include_tasks: disable_graphql_plugin.yml
    when:
      - manageiq_disabled_plugins is defined
      - "'graphql' in manageiq_disabled_plugins"

  - name: Install dependencies for the component
    command: "{{ item.deps_command }}"
    args:
      chdir: "/home/miq/{{ item.name }}"
    with_items: "{{ manageiq_git_repos }}"

  become: true
  become_user: miq

- name: Create partition on logs disk
  command: "parted --script --align opt {{ manageiq_logs_disk }} mklabel msdos mkpart primary ext2 1 100% toggle 1 lvm"
  args:
    creates: "{{ manageiq_logs_disk }}1"

- name: Check if VG exists
  command: /sbin/lvm vgs {{ manageiq_logs_vg_name }}
  ignore_errors: true
  register: vg_exists

- name: Create LVM VG for database
  lvg:
    vg: "{{ manageiq_logs_vg_name }}"
    pvs: "{{ manageiq_logs_disk }}1"
  when: vg_exists.failed

- name: Check if LV exists
  command: /sbin/lvm lvs {{ manageiq_logs_vg_name }}/{{ manageiq_logs_lv_name }}
  ignore_errors: true
  register: lv_exists

- name: Create LVM LV for database
  lvol:
    vg: "{{ manageiq_logs_vg_name }}"
    lv: "{{ manageiq_logs_lv_name }}"
    size: 100%FREE
  when: lv_exists.failed

- name: Create filesystem on LVM LV for logs
  filesystem:
    fstype: xfs
    dev: "/dev/mapper/{{ manageiq_logs_vg_name }}-{{ manageiq_logs_lv_name }}"

- name: Mount logs logical volume
  mount:
    name: "/home/miq/manageiq/log"
    src: "/dev/mapper/{{ manageiq_logs_vg_name }}-{{ manageiq_logs_lv_name }}"
    fstype: xfs
    state: mounted

- name: Set ownership of logs directory to miq
  file:
    path: /home/miq/manageiq/log
    owner: miq
    group: miq
    recurse: true

- block:
    - name: Add development repos to ManageIQ
      copy:
        dest: /home/miq/manageiq/bundler.d/Gemfile.dev.rb
        owner: miq
        group: miq
        mode: 0644
        content: |
          override_gem 'manageiq-ui-classic', :path => File.expand_path('../../manageiq-ui-classic', __dir__)
          gem 'miq_v2v_ui', :path => File.expand_path('../../miq_v2v_ui_plugin', __dir__)

    - name: Setup ManageIQ
      command: scl enable {{ manageiq_ruby_scl }} 'bin/setup'
      args:
        chdir: /home/miq/manageiq
      environment:
        PATH: "/home/miq/manageiq/bin:{{ ansible_env.PATH }}"

    - name: Clean unused gems
      command: scl enable {{ manageiq_ruby_scl }} 'bundle clean --force'
      args:
        chdir: /home/miq/manageiq

    - name: Check if ManageIQ EVM process is running
      shell: scl enable {{ manageiq_ruby_scl }} 'bundle exec rake evm:status | grep " default | EVM    | stopped "'
      args:
        chdir: /home/miq/manageiq
      ignore_errors: true
      register: evm_process_status

    - name: Check if ManageIQ EVM port is listening (3000/tcp)
      wait_for:
        port: 3000
        delay: 5
        timeout: 10
      ignore_errors: true
      register: evm_port_status

    - name: Start ManageIQ EVM
      command: scl enable {{ manageiq_ruby_scl }} 'bundle exec bin/rake evm:start'
      args:
        chdir: /home/miq/manageiq
      when:
        - evm_process_status.rc != 0
        - evm_port_status.failed

    - name: Wait for ManageIQ EVM service to be up
      wait_for:
        port: 3000
        delay: 10
        sleep: 10
        timeout: 300

    - name: Check if ManageIQ UI port is listening (8080/tcp)
      wait_for:
        port: 8080
        delay: 5
        timeout: 10
      ignore_errors: true
      register: v2v_ui_port_status

    - name: Start ManageIQ UI
      shell: nohup ./node_modules/.bin/webpack-dev-server --config config/webpack/development.js &
      args:
        chdir: /home/miq/manageiq-ui-classic
      environment:
        - NODE_ENV: development
      when:
        - v2v_ui_port_status.failed

    - name: Wait for ManageIQ UI service to be up
      wait_for:
        port: 8080
        delay: 10
        sleep: 10
        timeout: 300

  become: true
  become_user: miq

#- name:
#  copy:
#    src: /usr/lib/systemd/system/evmserverd.service
#    dest: /usr/lib/systemd/system/evmserverd.service
#    owner: root
#    group: root
#    mode: 0644

- name: Install httpd and mod_ssl packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - httpd
    - mod_ssl

- name: Adding HTTPD config to proxy 443 to 8080
  copy:
    dest: /etc/httpd/conf.d/manageiq.conf
    owner: root
    group: root
    mode: 0644
    content: |
      ProxyPass "/" "http://localhost:8080/"
      ProxyPassReverse "/" "http://localhost:8080/"

- name: Enable SELinux boolean so that HTTPD can relay
  seboolean:
    name: httpd_can_network_relay
    state: true
    persistent: true

- name: Start and enable httpd.service
  service:
    name: httpd
    state: started
    enabled: true

- name: Enable https service in firewalld
  firewalld:
    service: https
    state: enabled
    permanent: true
    immediate: true
