---
- name: ManageIQ virtual machine
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - block:
      - name: Authenticate against oVirt API
        ovirt_auth:
          url: "{{ ovirt_api_endpoint }}"
          username: "{{ ovirt_api_username }}"
          password: "{{ ovirt_api_password }}"
          insecure: yes

      - name: Create virtual machine
        ovirt_vms:
          auth: "{{ ovirt_auth }}"
          name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}"
          cluster: "{{ manageiq_vm_ovirt_cluster }}"
          template: "{{ manageiq_vm_template }}"
          cpu_sockets: "{{ manageiq_vm_cpus }}"
          memory: "{{ manageiq_vm_memory }}GiB"
          cloud_init:
            root_password: "{{ manageiq_vm_root_password }}"
            custom_script: |
              runcmd:
                - nmcli connection modify 'System eth0' ipv4.method static ipv4.addresses {{ manageiq_vm_ip_address }}/{{ manageiq_vm_subnet_prefix }} ipv4.gateway {{ manageiq_vm_gateway }} ipv4.dns {{ manageiq_vm_dns_servers }} ipv4.dns-search {{ manageiq_vm_dns_domain }}
                - ifdown eth0
                - ifup eth0
                - hostnamectl set-hostname {{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}
                - echo "{{ manageiq_vm_ip_address }} {{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}" >> /etc/hosts
                - systemctl restart ovirt-guest-agent
                - echo -e "[defaults]\nlog_path = /root/ansible.log\n" > /root/.ansible.cfg
                - touch /etc/cloud/cloud-init.disabled

      - name: Add database disk to virtual machine
        ovirt_disk:
          auth: "{{ ovirt_auth }}"
          name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}_Disk2"
          vm_name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}"
          size: 10GiB
          format: cow
          interface: virtio_scsi
          storage_domain: V2V-Data1

      - name: Add logs disk to virtual machine
        ovirt_disk:
          auth: "{{ ovirt_auth }}"
          name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}_Disk3"
          vm_name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}"
          size: 10GiB
          format: cow
          interface: virtio_scsi
          storage_domain: V2V-Data1

      - name: Add host to in memory inventory
        add_host:
          name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}"
          groups: miq_instances
          ansible_ssh_host: "{{ manageiq_vm_ip_address }}"
          ansible_user: root
          ansible_ssh_pass: "{{ manageiq_vm_root_password }}"

      always:
        - name: Always revoke the SSO token
          ovirt_auth:
            state: absent
            ovirt_auth: "{{ ovirt_auth }}"

    - name: Wait for virtual machine to be started
      wait_for:
        host: "{{ manageiq_vm_ip_address }}"
        port: 22

    - name: Add host to in memory inventory
      add_host:
        name: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}"
        groups: database,worker,ui
        ansible_user: root
        ansible_ssh_pass: "{{ manageiq_vm_root_password }}"
      tags:
        - inventory

- name: Deploy ManageIQ on the virtual machine
  hosts: "{{ manageiq_vm_name }}.{{ manageiq_vm_dns_domain }}"
  vars:
    ansible_ssh_common_args: -o PubkeyAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
  gather_facts: false
  tasks:
    - name: Install git and ansible packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - ansible
        - git

    - name: Clone v2v-demolab-ansible repository
      git:
        repo: https://github.com/fdupont-redhat/v2v-demolab-ansible.git
        dest: /root/v2v-demolab-ansible
        version: master

    - name: Create the inventory
      template:
        src: inventory.j2
        dest: /root/v2v-demolab-ansible/inventory
        owner: root
        group: root
        mode: 0644
      tags:
        - inventory

#    - name: Run the Ansible playbook that actually deploys ManageIQ
#      command: ansible-playbook manageiq_install.yml --skip-tags=v2v_content
#      args:
#        chdir: /root/v2v-demolab-ansible
#      async: 1000
#      poll: 0
#      register: ansible_run
#      tags:
#        - playbook
#
#    - name: Wait for playbook to finish
#      async_status:
#        jid: "{{ ansible_run.ansible_job_id }}"
#      register: ansible_result
#      until: ansible_result.finished
#      retries: 200
#      delay: 30
#      ignore_errors: yes
#      tags:
#        - playbook
#
#    - name: Debug Ansible result
#      debug:
#        var: ansible_result
#      tags: playbook
